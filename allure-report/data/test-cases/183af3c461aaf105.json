{
  "uid" : "183af3c461aaf105",
  "name" : "test_add_group_db[None:name\\\\4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b]",
  "fullName" : "test.test_add_group.test_add_group_db[None:name\\\\4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b]",
  "historyId" : "d51373be1051a429bb1ec7fc978827d3",
  "time" : {
    "start" : 1555517367183,
    "stop" : 1555517368528,
    "duration" : 1345
  },
  "description" : "",
  "descriptionHtml" : "",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert [1:test::, 2:... iG l-8q, ...] == [1:test::, 2::... iG l-8q, ...]\n  At index 82 diff: None:name\\4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b != 84:name4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b\n  Use -v to get the full diff",
  "statusTrace" : "app = <fixture.application.Application object at 0x038B8D50>\ndb = <fixture.db.DbFixture object at 0x038B8170>\njson_groups = None:name\\4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b\n\n    def test_add_group_db(app, db, json_groups):\n            group = json_groups\n            with pytest.allure.step('Given a group list'):\n                    old_groups = db.get_group_list()\n            with pytest.allure.step('When I add a group %s to the list' % group):\n                    app.group.create(group)\n            with pytest.allure.step('Then the new group list is equal to the old list with the added group'):\n                    new_groups = db.get_group_list()\n                    old_groups.append(group)\n>                   assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\nE                   assert [1:test::, 2:... iG l-8q, ...] == [1:test::, 2::... iG l-8q, ...]\nE                     At index 82 diff: None:name\\4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b != 84:name4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b\nE                     Use -v to get the full diff\n\ntest\\test_add_group.py:16: AssertionError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert [1:test::, 2:... iG l-8q, ...] == [1:test::, 2::... iG l-8q, ...]\n  At index 82 diff: None:name\\4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b != 84:name4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b\n  Use -v to get the full diff",
    "statusTrace" : "app = <fixture.application.Application object at 0x038B8D50>\ndb = <fixture.db.DbFixture object at 0x038B8170>\njson_groups = None:name\\4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b\n\n    def test_add_group_db(app, db, json_groups):\n            group = json_groups\n            with pytest.allure.step('Given a group list'):\n                    old_groups = db.get_group_list()\n            with pytest.allure.step('When I add a group %s to the list' % group):\n                    app.group.create(group)\n            with pytest.allure.step('Then the new group list is equal to the old list with the added group'):\n                    new_groups = db.get_group_list()\n                    old_groups.append(group)\n>                   assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\nE                   assert [1:test::, 2:... iG l-8q, ...] == [1:test::, 2::... iG l-8q, ...]\nE                     At index 82 diff: None:name\\4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b != 84:name4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b\nE                     Use -v to get the full diff\n\ntest\\test_add_group.py:16: AssertionError",
    "steps" : [ {
      "name" : "Given a group list",
      "time" : {
        "start" : 1555517367245,
        "stop" : 1555517367250,
        "duration" : 5
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "When I add a group None:name\\4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b to the list",
      "time" : {
        "start" : 1555517367250,
        "stop" : 1555517368463,
        "duration" : 1213
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Then the new group list is equal to the old list with the added group",
      "time" : {
        "start" : 1555517368463,
        "stop" : 1555517368478,
        "duration" : 15
      },
      "status" : "failed",
      "statusMessage" : "app = <fixture.application.Application object at 0x038B8D50>\ndb = <fixture.db.DbFixture object at 0x038B8170>\njson_groups = None:name\\4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b\n\n    def test_add_group_db(app, db, json_groups):\n            group = json_groups\n            with pytest.allure.step('Given a group list'):\n                    old_groups = db.get_group_list()\n            with pytest.allure.step('When I add a group %s to the list' % group):\n                    app.group.create(group)\n            with pytest.allure.step('Then the new group list is equal to the old list with the added group'):\n                    new_groups = db.get_group_list()\n                    old_groups.append(group)\n>                   assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\nE                   assert [1:test::, 2:... iG l-8q, ...] == [1:test::, 2::... iG l-8q, ...]\nE                     At index 82 diff: None:name\\4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b != 84:name4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b\nE                     Use -v to get the full diff\n\ntest\\test_add_group.py:16: AssertionError",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 3,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "host",
    "value" : "sam"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "thread",
    "value" : "41068-MainThread"
  }, {
    "name" : "suite",
    "value" : "test.test_add_group"
  }, {
    "name" : "testClass",
    "value" : "test.test_add_group"
  }, {
    "name" : "testMethod",
    "value" : "test_add_group_db[None:name\\\\4ds:header Z\"q#4* meiil}Qt):footerNMjL ^= b]"
  }, {
    "name" : "package",
    "value" : "test.test_add_group"
  }, {
    "name" : "resultFormat",
    "value" : "allure1"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "183af3c461aaf105.json",
  "parameterValues" : [ ]
}